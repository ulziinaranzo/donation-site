"use strict";var R=Object.create;var p=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var O=(a,n)=>{for(var i in n)p(a,i,{get:n[i],enumerable:!0})},x=(a,n,i,m)=>{if(n&&typeof n=="object"||typeof n=="function")for(let c of _(n))!U.call(a,c)&&c!==i&&p(a,c,{get:()=>n[c],enumerable:!(m=b(n,c))||m.enumerable});return a};var T=(a,n,i)=>(i=a!=null?R(C(a)):{},x(n||!a||!a.__esModule?p(i,"default",{value:a,enumerable:!0}):i,a)),S=a=>x(p({},"__esModule",{value:!0}),a);var M={};O(M,{FETCH_FAILURE_MESSAGE:()=>y,makeAccelerateExtension:()=>P,withAccelerate:()=>v});module.exports=S(M);var u=T(require("@prisma/client/scripts/default-index.js"),1);function w(a,n){let[i=0,m=0,c=0]=a.split(".").map(Number),[l=0,h=0,o=0]=n.split(".").map(Number),r=l-i,e=h-m,t=o-c;return r||e||t}var I=T(require("@prisma/client/scripts/default-index.js"),1);function E(){let a=I.default.Prisma.prismaVersion;return[q(),`PrismaEngine/${a.engine}`,`PrismaClient/${a.client}`].join(" ")}function q(){return typeof navigator<"u"?navigator.userAgent:typeof process<"u"&&typeof process.versions<"u"?`Node/${process.versions.node} (${process.platform}; ${process.arch})`:"EdgeRuntime"in globalThis?"Vercel-Edge-Runtime":"UnknownRuntime"}var $="@prisma/extension-accelerate",y="Unable to connect to the Accelerate API. This may be due to a network or DNS issue. Please check your connection and the Accelerate connection string. For details, visit https://www.prisma.io/docs/accelerate/troubleshoot.";function F(a){let n=E(),i;return async m=>{let{args:c}=m,{cacheStrategy:l,__accelerateInfo:h=!1,...o}=c,r=null,{__internalParams:e,query:t}=m;return e.customDataProxyFetch=()=>async(s,d)=>{let f=new Array;typeof l?.ttl=="number"&&f.push(`max-age=${l.ttl}`),typeof l?.swr=="number"&&f.push(`stale-while-revalidate=${l.swr}`);let A=l?.tags?.join(",")??"";d.headers={...d.headers,"cache-control":f.length>0?f.join(","):"no-cache","user-agent":n,...A.length>0?{"accelerate-cache-tags":A}:{}},i&&(d.headers["accelerate-query-engine-jwt"]=i);try{let g=await a(s,d);return r={cacheStatus:g.headers.get("accelerate-cache-status"),lastModified:new Date(g.headers.get("last-modified")??""),region:g.headers.get("cf-ray")?.split("-")[1]??"unspecified",requestId:g.headers.get("cf-ray")??"unspecified",signature:g.headers.get("accelerate-signature")??"unspecified"},i=g.headers.get("accelerate-query-engine-jwt")??void 0,g}catch{throw new Error(y)}},h?{data:await t(o,e),info:r}:t(o,e)}}function P(a){let n=w("5.1.0",u.default.Prisma.prismaVersion.client)>=0;return u.default.Prisma.defineExtension(i=>{let{apiKeyPromise:m,baseURL:c}=j(i),l=F(a);async function h(r){let e=await m;if(!e)return{requestId:"unspecified"};let t;try{t=await a(new URL("/invalidate",c).href,{method:"POST",headers:{authorization:`Bearer ${e}`,"content-type":"application/json"},body:JSON.stringify(r)})}catch{throw new Error(y)}if(!t?.ok){let s=await t.text();throw new Error(`Failed to invalidate Accelerate cache. Response was ${t.status} ${t.statusText}. ${s}`)}return t.body?.cancel(),{requestId:t.headers.get("cf-ray")??"unspecified"}}let o=i.$extends({name:$,query:{$allModels:{$allOperations:l}}});return o.$extends({name:$,client:{$accelerate:{invalidate:r=>h(r),invalidateAll:()=>h({tags:"all"})}},model:{$allModels:{aggregate(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.aggregate(r);return Object.assign(s,{withAccelerateInfo(){return t.aggregate({...r,__accelerateInfo:!0})}})},count(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.count(r);return Object.assign(s,{withAccelerateInfo(){return t.count({...r,__accelerateInfo:!0})}})},findFirst(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.findFirst(r);return Object.assign(s,{withAccelerateInfo(){return t.findFirst({...r,__accelerateInfo:!0})}})},findFirstOrThrow(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.findFirstOrThrow(r);return Object.assign(s,{withAccelerateInfo(){return t.findFirstOrThrow({...r,__accelerateInfo:!0})}})},findMany(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.findMany(r);return Object.assign(s,{withAccelerateInfo(){return t.findMany({...r,__accelerateInfo:!0})}})},findUnique(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.findUnique(r);return Object.assign(s,{withAccelerateInfo(){return t.findUnique({...r,__accelerateInfo:!0})}})},findUniqueOrThrow(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.findUniqueOrThrow(r);return Object.assign(s,{withAccelerateInfo(){return t.findUniqueOrThrow({...r,__accelerateInfo:!0})}})},groupBy(r){let e=u.default.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:o[e.name],s=t.groupBy(r);return Object.assign(s,{withAccelerateInfo(){return t.groupBy({...r,__accelerateInfo:!0})}})}}}})})}function j(a){let n=Reflect.get(a,"_accelerateEngineConfig");try{let{host:i,hostname:m,protocol:c,searchParams:l}=new URL(n?.accelerateUtils?.resolveDatasourceUrl?.(n));if(c==="prisma+postgres:"&&(m==="localhost"||m==="127.0.0.1"))return{apiKeyPromise:Promise.resolve(l.get("api_key")),baseURL:new URL(`http://${i}`)}}catch{}return{apiKeyPromise:a._engine.start().then(()=>a._engine.apiKey?.()??null),baseURL:new URL("https://accelerate.prisma-data.net")}}function v(a){let n=a?.fetch??fetch;return P(n)}0&&(module.exports={FETCH_FAILURE_MESSAGE,makeAccelerateExtension,withAccelerate});
