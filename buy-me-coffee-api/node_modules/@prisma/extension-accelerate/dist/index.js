import m from"@prisma/client/scripts/default-index.js";function y(s,n){let[c=0,l=0,u=0]=s.split(".").map(Number),[o=0,h=0,i=0]=n.split(".").map(Number),r=o-c,e=h-l,t=i-u;return r||e||t}import w from"@prisma/client/scripts/default-index.js";function P(){let s=w.Prisma.prismaVersion;return[I(),`PrismaEngine/${s.engine}`,`PrismaClient/${s.client}`].join(" ")}function I(){return typeof navigator<"u"?navigator.userAgent:typeof process<"u"&&typeof process.versions<"u"?`Node/${process.versions.node} (${process.platform}; ${process.arch})`:"EdgeRuntime"in globalThis?"Vercel-Edge-Runtime":"UnknownRuntime"}var A="@prisma/extension-accelerate",x="Unable to connect to the Accelerate API. This may be due to a network or DNS issue. Please check your connection and the Accelerate connection string. For details, visit https://www.prisma.io/docs/accelerate/troubleshoot.";function E(s){let n=P(),c;return async l=>{let{args:u}=l,{cacheStrategy:o,__accelerateInfo:h=!1,...i}=u,r=null,{__internalParams:e,query:t}=l;return e.customDataProxyFetch=()=>async(a,d)=>{let f=new Array;typeof o?.ttl=="number"&&f.push(`max-age=${o.ttl}`),typeof o?.swr=="number"&&f.push(`stale-while-revalidate=${o.swr}`);let p=o?.tags?.join(",")??"";d.headers={...d.headers,"cache-control":f.length>0?f.join(","):"no-cache","user-agent":n,...p.length>0?{"accelerate-cache-tags":p}:{}},c&&(d.headers["accelerate-query-engine-jwt"]=c);try{let g=await s(a,d);return r={cacheStatus:g.headers.get("accelerate-cache-status"),lastModified:new Date(g.headers.get("last-modified")??""),region:g.headers.get("cf-ray")?.split("-")[1]??"unspecified",requestId:g.headers.get("cf-ray")??"unspecified",signature:g.headers.get("accelerate-signature")??"unspecified"},c=g.headers.get("accelerate-query-engine-jwt")??void 0,g}catch{throw new Error(x)}},h?{data:await t(i,e),info:r}:t(i,e)}}function T(s){let n=y("5.1.0",m.Prisma.prismaVersion.client)>=0;return m.Prisma.defineExtension(c=>{let{apiKeyPromise:l,baseURL:u}=$(c),o=E(s);async function h(r){let e=await l;if(!e)return{requestId:"unspecified"};let t;try{t=await s(new URL("/invalidate",u).href,{method:"POST",headers:{authorization:`Bearer ${e}`,"content-type":"application/json"},body:JSON.stringify(r)})}catch{throw new Error(x)}if(!t?.ok){let a=await t.text();throw new Error(`Failed to invalidate Accelerate cache. Response was ${t.status} ${t.statusText}. ${a}`)}return t.body?.cancel(),{requestId:t.headers.get("cf-ray")??"unspecified"}}let i=c.$extends({name:A,query:{$allModels:{$allOperations:o}}});return i.$extends({name:A,client:{$accelerate:{invalidate:r=>h(r),invalidateAll:()=>h({tags:"all"})}},model:{$allModels:{aggregate(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.aggregate(r);return Object.assign(a,{withAccelerateInfo(){return t.aggregate({...r,__accelerateInfo:!0})}})},count(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.count(r);return Object.assign(a,{withAccelerateInfo(){return t.count({...r,__accelerateInfo:!0})}})},findFirst(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.findFirst(r);return Object.assign(a,{withAccelerateInfo(){return t.findFirst({...r,__accelerateInfo:!0})}})},findFirstOrThrow(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.findFirstOrThrow(r);return Object.assign(a,{withAccelerateInfo(){return t.findFirstOrThrow({...r,__accelerateInfo:!0})}})},findMany(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.findMany(r);return Object.assign(a,{withAccelerateInfo(){return t.findMany({...r,__accelerateInfo:!0})}})},findUnique(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.findUnique(r);return Object.assign(a,{withAccelerateInfo(){return t.findUnique({...r,__accelerateInfo:!0})}})},findUniqueOrThrow(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.findUniqueOrThrow(r);return Object.assign(a,{withAccelerateInfo(){return t.findUniqueOrThrow({...r,__accelerateInfo:!0})}})},groupBy(r){let e=m.Prisma.getExtensionContext(this),t=n?e.$parent[e.$name]:i[e.name],a=t.groupBy(r);return Object.assign(a,{withAccelerateInfo(){return t.groupBy({...r,__accelerateInfo:!0})}})}}}})})}function $(s){let n=Reflect.get(s,"_accelerateEngineConfig");try{let{host:c,hostname:l,protocol:u,searchParams:o}=new URL(n?.accelerateUtils?.resolveDatasourceUrl?.(n));if(u==="prisma+postgres:"&&(l==="localhost"||l==="127.0.0.1"))return{apiKeyPromise:Promise.resolve(o.get("api_key")),baseURL:new URL(`http://${c}`)}}catch{}return{apiKeyPromise:s._engine.start().then(()=>s._engine.apiKey?.()??null),baseURL:new URL("https://accelerate.prisma-data.net")}}function F(s){let n=s?.fetch??fetch;return T(n)}export{x as FETCH_FAILURE_MESSAGE,T as makeAccelerateExtension,F as withAccelerate};
